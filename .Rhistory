system.time({
nuis_fns <- do_crossfit(y = y, a = a, x = x, ymin = 0, ymax = 1,
nsplits = nsplits, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib,
do_parallel = TRUE, ncluster = 3)
})
system.time({
res_x <- get_bound(y = y, a = a, x = x, ymin = 0, ymax = 1, model = "x",
eps = eps_seq, delta = delta_seq, nuis_fns = nuis_fns,
alpha = alpha, B = B, do_mult_boot = TRUE,
do_eps_zero = TRUE, do_rearrange = TRUE)
})
system.time({
res_xa <- get_bound(y = y, a = a, x = x, ymin = 0, ymax = 1, model = "xa",
eps = eps_seq, delta = delta_seq, nuis_fns = nuis_fns,
alpha = alpha, B = B, do_mult_boot = TRUE,
do_eps_zero = TRUE, do_rearrange = TRUE)
})
bound_x <- res_x$bounds
bound_xa <- res_xa$bounds
eps_zero_x <- res_x$eps_zero
eps_zero_xa <- res_xa$eps_zero
round(100 * bound_x[1, , "1"], 2)
round(100 * eps_zero_x, 2)
round(100 * eps_zero_xa, 2)
round(100 * bound_xa[1, , "1"], 2)
rch_file_name <- paste0("./results/data analysis/nuis_fns_rhc_", nsplits,
"fold.RData")
nuis_fns <- readRDS(rch_file_name)
system.time({
res_x <- get_bound(y = y, a = a, x = x, ymin = 0, ymax = 1, model = "x",
eps = eps_seq, delta = delta_seq, nuis_fns = nuis_fns,
alpha = alpha, B = B, do_mult_boot = TRUE,
do_eps_zero = TRUE, do_rearrange = TRUE)
})
rm(list = ls())
library(RColorBrewer)
library(grid)
library(gridExtra)
source("plot_theme.R")
set.seed(1000)
dat <- read.csv("rhc_bounds.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat <- read.csv("rhc_bounds.csv")
data_url <- "http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv"
rhc <- read.csv(data_url, header = TRUE)
getwd()
random_samples <- sample(1:nrow(rhc), 1000, replace = FALSE)
datx <- dat[dat$model == "x" & dat$delta == 1, ]
nuis <- readRDS("nuis_fns_rhc.RData")
geta <- nuis[, "pi0"] * (1 - nuis[, "mu1"]) + nuis[, "pi1"] * nuis[, "mu0"]
hist(geta)
xvars <- c("age", "das2d3pc")
plot(x = rhc[, xvars[1]], y = rhc[, xvars[2]])
# Select epsilon points for example in Figure 2
eps_seq <- seq(0, 0.20, 0.01)
colors <- brewer.pal(9, "Set1")
colors <- colors[c(1,2,7,9)]
unconfound_val <- round(dat$lb[dat$epsilon == 0][1], 3)
unconfound_label <- as.character(unconfound_val * 100)
eps_zero <- datx$eps_zero[1]
xbreaks <- c(0, eps_zero , 0.20)
xlabs <- c(0, as.character(eps_zero * 100), 20)
rhc_subset <- rhc[random_samples, ]
ylims <- c(-0.45, 0.32)
yaxis_col <- c("black", "black", "red", "black", "black")
yaxis_bold <- ifelse(yaxis_col == "black", "plain" , "bold")
xaxis_col <- c("black", "blue", "black")
xaxis_bold <- ifelse(xaxis_col == "black", "plain" , "bold")
for(i in 1:length(eps_seq)) {
eps <- eps_seq[i]
shatl <- I(geta[random_samples]  <= quantile(geta, eps))
shatu <- I(geta[random_samples] > quantile(geta, 1 - eps))
group <- factor(rep("none", nrow(rhc_subset)),
levels = c("none", "lower bound", "upper bound"))
group[shatl] <- "lower bound"
group[shatu] <- "upper bound"
p1 <- ggplot(data = NULL) +
geom_point(aes(x = rhc_subset[, "age"],
y = rhc_subset[, "das2d3pc"],
colour = group)) +
scale_colour_manual(values=c("grey", colors[1], colors[2]),
name="colour") +
labs(x = "Age", y = "Duke Activity Status Index", colour = "") +
our_theme +
theme(legend.position = "none")
idx <- which(datx$epsilon <= eps)
if(eps == 0) {
add_layer <- geom_point(aes(x = 0, y = datx[datx$epsilon == 0, "lb"]),
colour = colors[1], size = 3)
} else {
add_layer <- geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "lb"]),
colour = colors[1], size = 1.5)
}
p2 <- ggplot(data = NULL) +
add_layer +
geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "ub"]),
colour = colors[2], size = 1.5) +
# geom_line(aes(x = datx$epsilon, y = 0),
#           colour = "black", size = 1) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = eps_zero, xend = eps_zero, y = ylims[1],  yend = 0)) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = 0, xend = eps_zero, y = 0, yend = 0)) +
labs(x = "% of Confounded Units",
y = "Difference in Survival (%)", colour = "") +
scale_x_continuous(breaks = xbreaks,
expand = c(0, 0), limits = c(0, 0.202),
labels = xlabs) +
scale_y_continuous(breaks = c(-0.4, -0.2, datx$lb[datx$epsilon == 0][1],
0, 0.2),
expand = c(0,0),
limits = ylims,
labels = c(-40, -20, unconfound_label, 0, 20)) +
our_theme +
theme(axis.text.y = element_text(colour = yaxis_col, face = yaxis_bold)) +
theme(axis.text.x = element_text(colour = xaxis_col, face = xaxis_bold)) +
theme(legend.position = "none")
p <- grid.arrange(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
ggsave(filename = paste0("../figures/clusters-", i-1, ".png"), plot = p,
device = cairo_pdf)
}
warnings()
p
p1
p2
grid.arrange(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
p
p <- arrangeGrob(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
p
ggsave(filename = paste0("../figures/clusters-", i-1, ".png"), plot = p,
device = cairo_pdf)
for(i in 1:length(eps_seq)) {
eps <- eps_seq[i]
shatl <- I(geta[random_samples]  <= quantile(geta, eps))
shatu <- I(geta[random_samples] > quantile(geta, 1 - eps))
group <- factor(rep("none", nrow(rhc_subset)),
levels = c("none", "lower bound", "upper bound"))
group[shatl] <- "lower bound"
group[shatu] <- "upper bound"
p1 <- ggplot(data = NULL) +
geom_point(aes(x = rhc_subset[, "age"],
y = rhc_subset[, "das2d3pc"],
colour = group)) +
scale_colour_manual(values=c("grey", colors[1], colors[2]),
name="colour") +
labs(x = "Age", y = "Duke Activity Status Index", colour = "") +
our_theme +
theme(legend.position = "none")
idx <- which(datx$epsilon <= eps)
if(eps == 0) {
add_layer <- geom_point(aes(x = 0, y = datx[datx$epsilon == 0, "lb"]),
colour = colors[1], size = 3)
} else {
add_layer <- geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "lb"]),
colour = colors[1], size = 1.5)
}
p2 <- ggplot(data = NULL) +
add_layer +
geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "ub"]),
colour = colors[2], size = 1.5) +
# geom_line(aes(x = datx$epsilon, y = 0),
#           colour = "black", size = 1) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = eps_zero, xend = eps_zero, y = ylims[1],  yend = 0)) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = 0, xend = eps_zero, y = 0, yend = 0)) +
labs(x = "% of Confounded Units",
y = "Difference in Survival (%)", colour = "") +
scale_x_continuous(breaks = xbreaks,
expand = c(0, 0), limits = c(0, 0.202),
labels = xlabs) +
scale_y_continuous(breaks = c(-0.4, -0.2, datx$lb[datx$epsilon == 0][1],
0, 0.2),
expand = c(0,0),
limits = ylims,
labels = c(-40, -20, unconfound_label, 0, 20)) +
our_theme +
theme(axis.text.y = element_text(colour = yaxis_col, face = yaxis_bold)) +
theme(axis.text.x = element_text(colour = xaxis_col, face = xaxis_bold)) +
theme(legend.position = "none")
p <- arrangeGrob(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
ggsave(filename = paste0("../figures/clusters-", i-1, ".png"), plot = p,
height = 8, width = 8, device = cairo_pdf)
}
warnings()
for(i in 1:length(eps_seq)) {
eps <- eps_seq[i]
shatl <- I(geta[random_samples]  <= quantile(geta, eps))
shatu <- I(geta[random_samples] > quantile(geta, 1 - eps))
group <- factor(rep("none", nrow(rhc_subset)),
levels = c("none", "lower bound", "upper bound"))
group[shatl] <- "lower bound"
group[shatu] <- "upper bound"
p1 <- ggplot(data = NULL) +
geom_point(aes(x = rhc_subset[, "age"],
y = rhc_subset[, "das2d3pc"],
colour = group)) +
scale_colour_manual(values=c("grey", colors[1], colors[2]),
name="colour") +
labs(x = "Age", y = "Duke Activity Status Index", colour = "") +
our_theme +
theme(legend.position = "none")
idx <- which(datx$epsilon <= eps)
if(eps == 0) {
add_layer <- geom_point(aes(x = 0, y = datx[datx$epsilon == 0, "lb"]),
colour = colors[1], size = 3)
} else {
add_layer <- geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "lb"]),
colour = colors[1], size = 1.5)
}
p2 <- ggplot(data = NULL) +
add_layer +
geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "ub"]),
colour = colors[2], size = 1.5) +
# geom_line(aes(x = datx$epsilon, y = 0),
#           colour = "black", size = 1) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = eps_zero, xend = eps_zero, y = ylims[1],  yend = 0)) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = 0, xend = eps_zero, y = 0, yend = 0)) +
labs(x = "% of Confounded Units",
y = "Difference in Survival (%)", colour = "") +
scale_x_continuous(breaks = xbreaks,
expand = c(0, 0), limits = c(0, 0.202),
labels = xlabs) +
scale_y_continuous(breaks = c(-0.4, -0.2, datx$lb[datx$epsilon == 0][1],
0, 0.2),
expand = c(0,0),
limits = ylims,
labels = c(-40, -20, unconfound_label, 0, 20)) +
our_theme +
theme(axis.text.y = element_text(colour = yaxis_col, face = yaxis_bold)) +
theme(axis.text.x = element_text(colour = xaxis_col, face = xaxis_bold)) +
theme(legend.position = "none")
p <- arrangeGrob(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
ggsave(filename = paste0("../figures/clusters-", i-1, ".png"), plot = p,
height = 15, width = 20, device = cairo_pdf)
}
for(i in 1:length(eps_seq)) {
eps <- eps_seq[i]
shatl <- I(geta[random_samples]  <= quantile(geta, eps))
shatu <- I(geta[random_samples] > quantile(geta, 1 - eps))
group <- factor(rep("none", nrow(rhc_subset)),
levels = c("none", "lower bound", "upper bound"))
group[shatl] <- "lower bound"
group[shatu] <- "upper bound"
p1 <- ggplot(data = NULL) +
geom_point(aes(x = rhc_subset[, "age"],
y = rhc_subset[, "das2d3pc"],
colour = group)) +
scale_colour_manual(values=c("grey", colors[1], colors[2]),
name="colour") +
labs(x = "Age", y = "Duke Activity Status Index", colour = "") +
our_theme +
theme(legend.position = "none")
idx <- which(datx$epsilon <= eps)
if(eps == 0) {
add_layer <- geom_point(aes(x = 0, y = datx[datx$epsilon == 0, "lb"]),
colour = colors[1], size = 3)
} else {
add_layer <- geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "lb"]),
colour = colors[1], size = 1.5)
}
p2 <- ggplot(data = NULL) +
add_layer +
geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "ub"]),
colour = colors[2], size = 1.5) +
# geom_line(aes(x = datx$epsilon, y = 0),
#           colour = "black", size = 1) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = eps_zero, xend = eps_zero, y = ylims[1],  yend = 0)) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = 0, xend = eps_zero, y = 0, yend = 0)) +
labs(x = "% of Confounded Units",
y = "Difference in Survival (%)", colour = "") +
scale_x_continuous(breaks = xbreaks,
expand = c(0, 0), limits = c(0, 0.202),
labels = xlabs) +
scale_y_continuous(breaks = c(-0.4, -0.2, datx$lb[datx$epsilon == 0][1],
0, 0.2),
expand = c(0,0),
limits = ylims,
labels = c(-40, -20, unconfound_label, 0, 20)) +
our_theme +
theme(axis.text.y = element_text(colour = yaxis_col, face = yaxis_bold)) +
theme(axis.text.x = element_text(colour = xaxis_col, face = xaxis_bold)) +
theme(legend.position = "none")
p <- arrangeGrob(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
ggsave(filename = paste0("../figures/clusters-", i-1, ".png"), plot = p,
height = 3, width = 5, device = cairo_pdf)
}
eps_zero <- datx$eps_zero[1][1:10]
eps_zero
eps_seq <- seq(0, 0.10, 0.01)
eps_seq
##################################################################
## Generate plot of the bounds for data of Connors et al (1996) ##
##################################################################
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(RColorBrewer)
library(grid)
library(gridExtra)
source("plot_theme.R")
set.seed(1000)
dat <- read.csv("rhc_bounds.csv")
data_url <- "http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv"
rhc <- read.csv(data_url, header = TRUE)
random_samples <- sample(1:nrow(rhc), 1000, replace = FALSE)
datx <- dat[dat$model == "x" & dat$delta == 1, ]
nuis <- readRDS("nuis_fns_rhc.RData")
geta <- nuis[, "pi0"] * (1 - nuis[, "mu1"]) + nuis[, "pi1"] * nuis[, "mu0"]
hist(geta)
xvars <- c("age", "das2d3pc")
plot(x = rhc[, xvars[1]], y = rhc[, xvars[2]])
# Select epsilon points for example in Figure 2
eps_seq <- seq(0, 0.10, 0.01)
colors <- brewer.pal(9, "Set1")
colors <- colors[c(1,2,7,9)]
unconfound_val <- round(dat$lb[dat$epsilon == 0][1], 3)
unconfound_label <- as.character(unconfound_val * 100)
eps_zero <- datx$eps_zero[1]
xbreaks <- c(0, eps_zero , 0.20)
xlabs <- c(0, as.character(eps_zero * 100), 20)
rhc_subset <- rhc[random_samples, ]
ylims <- c(-0.45, 0.32)
yaxis_col <- c("black", "black", "red", "black", "black")
yaxis_bold <- ifelse(yaxis_col == "black", "plain" , "bold")
xaxis_col <- c("black", "blue", "black")
xaxis_bold <- ifelse(xaxis_col == "black", "plain" , "bold")
for(i in 1:length(eps_seq)) {
eps <- eps_seq[i]
shatl <- I(geta[random_samples]  <= quantile(geta, eps))
shatu <- I(geta[random_samples] > quantile(geta, 1 - eps))
group <- factor(rep("none", nrow(rhc_subset)),
levels = c("none", "lower bound", "upper bound"))
group[shatl] <- "lower bound"
group[shatu] <- "upper bound"
p1 <- ggplot(data = NULL) +
geom_point(aes(x = rhc_subset[, "age"],
y = rhc_subset[, "das2d3pc"],
colour = group)) +
scale_colour_manual(values=c("grey", colors[1], colors[2]),
name="colour") +
labs(x = "Age", y = "Duke Activity Status Index", colour = "") +
our_theme +
theme(legend.position = "none")
idx <- which(datx$epsilon <= eps)
if(eps == 0) {
add_layer <- geom_point(aes(x = 0, y = datx[datx$epsilon == 0, "lb"]),
colour = colors[1], size = 3)
} else {
add_layer <- geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "lb"]),
colour = colors[1], size = 1.5)
}
p2 <- ggplot(data = NULL) +
add_layer +
geom_line(aes(x = datx$epsilon[idx], y = datx[idx, "ub"]),
colour = colors[2], size = 1.5) +
# geom_line(aes(x = datx$epsilon, y = 0),
#           colour = "black", size = 1) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = eps_zero, xend = eps_zero, y = ylims[1],  yend = 0)) +
geom_segment(data = NULL, size = 0.8, colour = "black", alpha = 0.5,
aes(x = 0, xend = eps_zero, y = 0, yend = 0)) +
labs(x = "% of Confounded Units",
y = "Difference in Survival (%)", colour = "") +
scale_x_continuous(breaks = xbreaks,
expand = c(0, 0), limits = c(0, 0.202),
labels = xlabs) +
scale_y_continuous(breaks = c(-0.4, -0.2, datx$lb[datx$epsilon == 0][1],
0, 0.2),
expand = c(0,0),
limits = ylims,
labels = c(-40, -20, unconfound_label, 0, 20)) +
our_theme +
theme(axis.text.y = element_text(colour = yaxis_col, face = yaxis_bold)) +
theme(axis.text.x = element_text(colour = xaxis_col, face = xaxis_bold)) +
theme(legend.position = "none")
p <- arrangeGrob(p1, p2, ncol = 2,
top = textGrob(paste0("\u03B5 = ", eps * 100, "%"),
gp = gpar(fontsize = 20, font = 3,
fontfamily = "Times")))
ggsave(filename = paste0("../figures/clusters-", i-1, ".png"), plot = p,
height = 3, width = 5, device = cairo_pdf)
}
##########################################################
## Analyze data of Connors et al (1996) as in Section 5 ##
##########################################################
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(varhandle)
library(devtools)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = TRUE) # if warnings are causing erros and they are not important one may use this
devtools::install_github("matteobonvini/sensitivitypuc", force = TRUE)
##########################################################
## Analyze data of Connors et al (1996) as in Section 5 ##
##########################################################
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(varhandle)
library(devtools)
# Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = TRUE) # if warnings are causing erros and they are not important one may use this
# devtools::install_github("matteobonvini/sensitivitypuc", force = TRUE)
library(sensitivitypuc)
options(stringsAsFactors = TRUE)
set.seed(1000)
data_url <- "http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv"
dat <- read.csv(data_url, header = TRUE)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
missdat <- as.data.frame(matrix(0, ncol = length(miss_covs), nrow = nrow(x),
dimnames = list(NULL, paste0("is_miss_", miss_covs))))
for(varname in miss_covs) {
idx <- which(is.na(x[, varname]))
if(class(x[, varname]) == "factor") {
levels(x[, varname]) <- c(levels(x[, varname]), "missing")
x[idx, varname] <- "missing"
missdat[, paste0("is_miss_", varname)] <- NULL
} else {
x[idx, varname] <- 0
missdat[idx, paste0("is_miss_", varname)] <- 1
}
}
x <- cbind(x, missdat)
# Fix factors or otherwise SuperLearner complains
newdf <- x
for(i in 1:ncol(x)) {
if(class(x[, i]) == "factor") {
tmp <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf) %in% colnames(x)[i]]
newdf <- cbind(newdf, tmp[, -1, drop = FALSE])
}
}
x <- newdf
rm(newdf)
rm(tmp)
# Avoid SuperLearner conflicts due to variable names
colnames(x) <- paste("x", 1:ncol(x), sep = "")
# A = 1 means patient underwent RHC
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
# Y = 1 means survival at day 30
y <- ifelse(dat$dth30 == "No", 1, 0)
# unadjusted RR (using morality as outcome)
mean(y[a == 0]) / (1 - mean(y[a == 0])) * (1 - mean(y[a == 1])) / mean(y[a == 1])
# unadjusted RD
mean(y[a == 0]) - mean(y[a == 1])
# Select values for prop of unmeasured confounding at which evaluate bounds
eps_seq <- seq(0, 0.5, 0.0001)
delta_seq <- c(0.25, 0.50, 0.75, 1)
# Select model, "x" = S \ind (Y, A) | X, "xa" = S \ind Y | (X, A)
model <- c("x", "xa")
# Select confidence level and # rademachers for multiplier bootstrap
alpha <- 0.05
B <- 10000
# Select SuperLearner Library
sl.lib <- c("SL.mean", "SL.speedlm", "SL.speedglm", "SL.gam", "SL.svm",
"SL.polymars", "SL.ranger")
nsplits <- 5
# Estimate Regression functions once for both model "x" and model "xa"
# There is a "non-list contrasts argument ignored" warning from SL gam library
# coming from model.matrix, which I think can be ignored.
# system.time({
#   nuis_fns <- do_crossfit(y = y, a = a, x = x, ymin = 0, ymax = 1,
#                           nsplits = nsplits, outfam = binomial(),
#                           treatfam = binomial(), sl.lib = sl.lib,
#                           do_parallel = TRUE, ncluster = 3)
# })
rch_file_name <- paste0("./results/data analysis/nuis_fns_rhc_", nsplits,
"fold.RData")
# saveRDS(nuis_fns, file = rch_file_name)
nuis_fns <- readRDS(rch_file_name)
system.time({
res_x <- get_bound(y = y, a = a, x = x, ymin = 0, ymax = 1, model = "x",
eps = eps_seq, delta = delta_seq, nuis_fns = nuis_fns,
alpha = alpha, B = B, do_mult_boot = TRUE,
do_eps_zero = TRUE, do_rearrange = TRUE)
})
bound_x <- res_x$bounds
eps_zero_x <- res_x$eps_zero
round(100 * bound_x[1, , "1"], 2)
round(100 * eps_zero_x, 2)
