ub_var <- res$ub_var[idx2, ]
lb_estbar <- summarize_by(phibar_lb, "mean", delta, eps)
ub_estbar <- summarize_by(phibar_ub, "mean", delta, eps)
calpha_lb <- get_multboot(n=n, psihat=lb_estbar$ifvals,
sigmahat=lb_var$ifvals,
ifvals=phibar_lb$ifvals, alpha=alpha/2, B=1e4)
calpha_ub <- get_multboot(n=n, psihat=-ub_estbar$ifvals,
sigmahat=ub_var$ifvals,
ifvals=-phibar_ub$ifvals, alpha=alpha/2, B=1e4)
ci_lb <- get_ci(lb, sqrt(lb_var$ifvals/n), calpha_lb)
ci_ub <- get_ci(ub, sqrt(ub_var$ifvals/n), calpha_ub)
cnames <- c("eps", "n", "lb", "ub", "eps_zero", "ci_lo", "ci_lb_hi",
"ci_ub_lo", "ci_hi", "eps_zero_lo", "eps_zero_hi")
nidx <- length(bounds$eps[idx])
out <- c(bounds$eps[idx], rep(n, nidx), lb, ub, rep(eps_zero$eps_zero, nidx),
ci_lb[, 1], ci_lb[, 2], ci_ub[, 1], ci_ub[, 2],
rep(eps_zero$eps_zero_lo, nidx), rep(eps_zero$eps_zero_hi, nidx))
out <- matrix(out, ncol = length(cnames), nrow = nidx,
dimnames = list(NULL, cnames))
return(out)
}
# Store the results for Table 1 in Section 5
res_cnames <- c("n", "bias_lb", "bias_ub", "bias_eps0", "rmse_lb", "rmse_ub",
"cvg_reg", "cvg_eps0")
res <- matrix(NA, ncol = length(res_cnames), nrow = length(n),
dimnames = list(NULL, res_cnames))
for (i in 1:length(n)) {
# Simulation begins
sims <- pbreplicate(nsim, sim_fn(n[i]))
res[i, "n"] <- n[i]
res[i, "bias_lb"] <- bias(sims[, "lb", ], truth[, "lb"])
res[i, "bias_ub"] <- bias(sims[, "ub", ], truth[, "ub"])
res[i, "bias_eps0"] <- bias(sims[, "eps_zero", ], truth[, "eps_zero"])
res[i, "rmse_lb"] <- rmse(sims[, "lb", ], truth[, "lb"], n[i])
res[i, "rmse_ub"] <- rmse(sims[, "ub", ], truth[, "ub"], n[i])
res[i, "cvg_reg"] <- coverage(sims[, "ci_lo", ], sims[, "ci_hi", ],
truth[, "lb"], truth[, "ub"])
res[i, "cvg_eps0"] <- coverage(sims[, "eps_zero_lo", ],
sims[, "eps_zero_hi", ],
truth[, "eps_zero"], truth[, "eps_zero"])
print(res[1:i, ])
saveRDS(sims, file=paste0("./results/simulation/sims", n[i], ".RData"))
saveRDS(res, file=paste0("./results/simulation/sim_res", n[i], ".RData"))
}
saveRDS(res, file=paste0("./results/simulation/sim_res.RData"))
warnings()
sims
rm(list = ls())
set.seed(1000)
library(pbapply)
library(devtools)
devtools::install("C:/Users/matte/Desktop/sensAteBounds")
# setwd("C:/Users/matte/Desktop/sensAteBounds")
# devtools::test()
library(sensAteBounds)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("true_regression_functions_simulation.R")
## Load true values ##
truth <- readRDS("./data/truth_simulation.RData")
eps_seq <- attributes(truth)$eps_seq
eps0_seq <- attributes(truth)$eps0_seq
# SL library
sl.lib <- c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.gam")
nsim <- 2
n <- c(10000, 5000, 1000, 500)
alpha <- 0.05
sim_fn <- function(n) {
# Function to simulate data and estimate bounds under S \ind (Y, A) | X
df <- gen_data(n)
y <- df$y
a <- df$a
x <- df[, c("x1", "x2")]
# estimate the nuisance regression functios
nuis_fns <- do_crossfit(y = y, a = a, x = x, nsplits = 2, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib)
res <- get_bound(y = y, a = a, x = x, outfam = NULL, treatfam = NULL,
model = "x", eps = eps0_seq, delta = 1, nsplits = NULL,
do_mult_boot = FALSE, do_eps_zero = TRUE,
nuis_fns = nuis_fns, alpha = alpha)
bounds <- res$bounds
eps_zero <- res$eps_zero
# select subset of esp0_seq where to evaluate the bounds curves
idx <- which(round(bounds$eps, 10) %in% round(eps_seq, 10))
lb <- bounds$lb[idx]
ub <- bounds$ub[idx]
idx1 <- which(round(res$phibar_lb$eps, 10) %in% round(eps_seq, 10))
phibar_lb <- res$phibar_lb[idx1, ]
phibar_ub <- res$phibar_ub[idx1, ]
idx2 <- which(round(res$lb_var$eps, 10) %in% round(eps_seq, 10))
lb_var <- res$lb_var[idx2, ]
ub_var <- res$ub_var[idx2, ]
lb_estbar <- summarize_by(phibar_lb, "mean", delta, eps)
ub_estbar <- summarize_by(phibar_ub, "mean", delta, eps)
calpha_lb <- get_multboot(n=n, psihat=lb_estbar$ifvals,
sigmahat=lb_var$ifvals,
ifvals=phibar_lb$ifvals, alpha=alpha/2, B=1e4)
calpha_ub <- get_multboot(n=n, psihat=-ub_estbar$ifvals,
sigmahat=ub_var$ifvals,
ifvals=-phibar_ub$ifvals, alpha=alpha/2, B=1e4)
ci_lb <- get_ci(lb, sqrt(lb_var$ifvals/n), calpha_lb)
ci_ub <- get_ci(ub, sqrt(ub_var$ifvals/n), calpha_ub)
cnames <- c("eps", "n", "lb", "ub", "eps_zero", "ci_lo", "ci_lb_hi",
"ci_ub_lo", "ci_hi", "eps_zero_lo", "eps_zero_hi")
nidx <- length(bounds$eps[idx])
out <- c(bounds$eps[idx], rep(n, nidx), lb, ub, rep(eps_zero$est, nidx),
ci_lb[, 1], ci_lb[, 2], ci_ub[, 1], ci_ub[, 2],
rep(eps_zero$ci_lo, nidx), rep(eps_zero$ci_hi, nidx))
out <- matrix(out, ncol = length(cnames), nrow = nidx,
dimnames = list(NULL, cnames))
return(out)
}
# Store the results for Table 1 in Section 5
res_cnames <- c("n", "bias_lb", "bias_ub", "bias_eps0", "rmse_lb", "rmse_ub",
"cvg_reg", "cvg_eps0")
res <- matrix(NA, ncol = length(res_cnames), nrow = length(n),
dimnames = list(NULL, res_cnames))
for (i in 1:length(n)) {
# Simulation begins
sims <- pbreplicate(nsim, sim_fn(n[i]))
res[i, "n"] <- n[i]
res[i, "bias_lb"] <- bias(sims[, "lb", ], truth[, "lb"])
res[i, "bias_ub"] <- bias(sims[, "ub", ], truth[, "ub"])
res[i, "bias_eps0"] <- bias(sims[, "eps_zero", ], truth[, "eps_zero"])
res[i, "rmse_lb"] <- rmse(sims[, "lb", ], truth[, "lb"], n[i])
res[i, "rmse_ub"] <- rmse(sims[, "ub", ], truth[, "ub"], n[i])
res[i, "cvg_reg"] <- coverage(sims[, "ci_lo", ], sims[, "ci_hi", ],
truth[, "lb"], truth[, "ub"])
res[i, "cvg_eps0"] <- coverage(sims[, "eps_zero_lo", ],
sims[, "eps_zero_hi", ],
truth[, "eps_zero"], truth[, "eps_zero"])
print(res[1:i, ])
saveRDS(sims, file=paste0("./results/simulation/sims", n[i], ".RData"))
saveRDS(res, file=paste0("./results/simulation/sim_res", n[i], ".RData"))
}
saveRDS(res, file=paste0("./results/simulation/sim_res.RData"))
warnings()
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(devtools)
devtools::install("C:/Users/matte/Desktop/sensAteBounds")
library(sensAteBounds)
library(varhandle)
set.seed(1000)
# URL http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.html
dat <- read.csv("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv",
header=TRUE)
names(dat)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
x <- dat[, covariates]
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(devtools)
devtools::install("C:/Users/matte/Desktop/sensAteBounds")
library(sensAteBounds)
library(varhandle)
set.seed(1000)
# URL http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.html
dat <- read.csv("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv",
header=TRUE)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
x <- dat[, covariates]
newdf <- x
# Fix factors or otherwise SL complains
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
colnames(x) <- paste("x", 1:ncol(x), sep = "")
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
y <- ifelse(dat$dth30 == "No", 1, 0)
eps_seq <- seq(0, 0.2, 0.01)
model <- c("x", "xa")
sl.lib <- c("SL.mean", "SL.speedlm", "SL.speedglm", "SL.gam",
"SL.ranger", "SL.polymars", "SL.svm")
nuis_fns <- do_crossfit(y = y, a = a, x = x, nsplits = 5, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib)
saveRDS(nuis_fns, file = "./results/nuis_fns_rhc.RData")
bounds <- NULL
for(mm in model) {
res <- get_bound(y=y, a=a, x=x, outfam=NULL, treatfam=NULL,
model=mm, eps=eps_seq, delta=1, nsplits=NULL,
do_mult_boot=TRUE, do_eps_zero=TRUE,
nuis_fns=nuis_fns, alpha=0.05, B=10000)
bounds_next <- data.frame(epsilon=res$bounds$eps, delta=res$bounds$delta,
lb=res$bounds$lb, ub=res$bounds$ub,
ci_lo=res$bounds$ci_lo, ci_hi=res$bounds$ci_hi,
ci_lo_ptw=res$bounds$ci_lo_ptwise,
ci_hi_ptw=res$bounds$ci_hi_ptwise,
ci_lo_ptw_im04=res$bounds$ci_lo_ptwise_im04,
ci_hi_ptw_im04=res$bounds$ci_hi_ptwise_im04,
length_bound=res$bounds$ub-res$bounds$lb,
no_zero=res$bound$no_zero,
eps_zero=res$eps_zero$est,
eps_zero_lo=res$eps_zero$ci_lo,
eps_zero_hi=res$eps_zero$ci_hi)
bounds_next$model <- mm
bounds <- rbind(bounds, bounds_next)
}
write.csv(bounds, "./results/data analysis/rhc_bounds.csv", row.names = FALSE)
View(x)
missidx <- apply(dat, 2, function(x) sum(is.na(x)) > 0)
missidx
x <- dat[, covariates]
missidx <- apply(x, 2, function(x) sum(is.na(x)) > 0)
missidx
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
miss_covs
print(miss_covs)
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
newdf <- x[, !covariates %in% miss_covs]
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
# Exclude covariates with missing values
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
newdf <- x[, !covariates %in% miss_covs]
# Fix factors or otherwise SL complains
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
rm(new)
colnames(x) <- paste("x", 1:ncol(x), sep = "")
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
y <- ifelse(dat$dth30 == "No", 1, 0)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(devtools)
devtools::install("C:/Users/matte/Desktop/sensAteBounds")
library(sensAteBounds)
library(varhandle)
set.seed(1000)
# URL http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.html
dat <- read.csv("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv",
header=TRUE)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
# Exclude covariates with missing values
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
newdf <- x[, !covariates %in% miss_covs]
# Fix factors or otherwise SL complains
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
rm(new)
# Avoid SuperLearner conflicts due to variable names
colnames(x) <- paste("x", 1:ncol(x), sep = "")
# A = 1 means patient underwent RHC
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
# Y = 1 means survival at day 30
y <- ifelse(dat$dth30 == "No", 1, 0)
# Select values for prop of unmeasured confounding at which evaluate bounds
eps_seq <- seq(0, 0.2, 0.01)
# Select model, "x" = S \ind (Y, A) | X, "xa" = S \ind Y | (X, A)
model <- c("x", "xa")
# Select SuperLearner Library
sl.lib <- c("SL.mean", "SL.speedlm", "SL.speedglm", "SL.gam",
"SL.ranger", "SL.polymars", "SL.svm")
# Estimate Regression functions once for both model "x" and model "xa"
nuis_fns <- do_crossfit(y = y, a = a, x = x, nsplits = 5, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib)
saveRDS(nuis_fns, file = "./results/nuis_fns_rhc.RData")
bounds <- NULL
for(mm in model) {
# Loop thru models and evaluate bounds curves
res <- get_bound(y=y, a=a, x=x, outfam=NULL, treatfam=NULL,
model=mm, eps=eps_seq, delta=1, nsplits=NULL,
do_mult_boot=TRUE, do_eps_zero=TRUE,
nuis_fns=nuis_fns, alpha=0.05, B=10000)
bounds_next <- data.frame(epsilon=res$bounds$eps, delta=res$bounds$delta,
lb=res$bounds$lb, ub=res$bounds$ub,
ci_lo=res$bounds$ci_lo, ci_hi=res$bounds$ci_hi,
ci_lo_ptw=res$bounds$ci_lo_ptwise,
ci_hi_ptw=res$bounds$ci_hi_ptwise,
ci_lo_ptw_im04=res$bounds$ci_lo_ptwise_im04,
ci_hi_ptw_im04=res$bounds$ci_hi_ptwise_im04,
length_bound=res$bounds$ub-res$bounds$lb,
no_zero=res$bound$no_zero,
eps_zero=res$eps_zero$est,
eps_zero_lo=res$eps_zero$ci_lo,
eps_zero_hi=res$eps_zero$ci_hi)
bounds_next$model <- mm
bounds <- rbind(bounds, bounds_next)
}
write.csv(bounds, "./results/data analysis/rhc_bounds.csv", row.names = FALSE)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
newdf <- x[, !covariates %in% miss_covs]
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(devtools)
devtools::install("C:/Users/matte/Desktop/sensAteBounds")
library(sensAteBounds)
library(varhandle)
set.seed(1000)
# URL http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.html
dat <- read.csv("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv",
header=TRUE)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
# Exclude covariates with missing values
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
x <- x[, !covariates %in% miss_covs]
# Fix factors or otherwise SL complains
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
rm(new)
# Avoid SuperLearner conflicts due to variable names
colnames(x) <- paste("x", 1:ncol(x), sep = "")
# A = 1 means patient underwent RHC
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
# Y = 1 means survival at day 30
y <- ifelse(dat$dth30 == "No", 1, 0)
# Select values for prop of unmeasured confounding at which evaluate bounds
eps_seq <- seq(0, 0.2, 0.01)
# Select model, "x" = S \ind (Y, A) | X, "xa" = S \ind Y | (X, A)
model <- c("x", "xa")
# Select SuperLearner Library
sl.lib <- c("SL.mean", "SL.speedlm", "SL.speedglm", "SL.gam",
"SL.ranger", "SL.polymars", "SL.svm")
# Estimate Regression functions once for both model "x" and model "xa"
nuis_fns <- do_crossfit(y = y, a = a, x = x, nsplits = 5, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib)
sum(is.factor(x))
View(x)
sum(is.character(x))
i
ncol(x)
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
x <- x[, !covariates %in% miss_covs]
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
newdf <- x
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
rm(new)
colnames(x) <- paste("x", 1:ncol(x), sep = "")
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
y <- ifelse(dat$dth30 == "No", 1, 0)
eps_seq <- seq(0, 0.2, 0.01)
model <- c("x", "xa")
sl.lib <- c("SL.mean", "SL.speedlm", "SL.speedglm", "SL.gam",
"SL.ranger", "SL.polymars", "SL.svm")
nuis_fns <- do_crossfit(y = y, a = a, x = x, nsplits = 5, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(devtools)
devtools::install("C:/Users/matte/Desktop/sensAteBounds")
library(sensAteBounds)
library(varhandle)
set.seed(1000)
# URL http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.html
dat <- read.csv("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.csv",
header=TRUE)
covariates <- c("age", "sex", "race", "edu", "income",
"ninsclas", "cat1", "cat2",
"resp", "card", "neuro", "gastr", "renal", "meta",
"hema", "seps", "trauma", "ortho",
"adld3p", "das2d3pc", "dnr1", "ca",  "aps1", "scoma1",
"wtkilo1", "temp1", "meanbp1", "resp1", "hrt1", "pafi1",
"paco21", "ph1", "wblc1", "hema1", "sod1", "pot1", "crea1",
"bili1", "alb1", "urin1",
"cardiohx", "chfhx", "dementhx",
"psychhx", "chrpulhx", "renalhx", "liverhx", "gibledhx",
"malighx", "immunhx", "transhx", "amihx")
# Exclude covariates with missing values
x <- dat[, covariates]
miss_covs <- covariates[apply(x, 2, function(x) sum(is.na(x)) > 0)]
print(miss_covs)
x <- x[, !covariates %in% miss_covs]
# Fix factors or otherwise SuperLearner complains
newdf <- x
for(i in 1:ncol(x)) {
if(class(x[, i])=="factor") {
new <- to.dummy(x[, i], colnames(x)[i])
newdf <- newdf[, !colnames(newdf)%in%colnames(x)[i]]
newdf <- cbind(newdf, new[, -1, drop=FALSE])
}
}
x <- newdf
rm(newdf)
rm(new)
# Avoid SuperLearner conflicts due to variable names
colnames(x) <- paste("x", 1:ncol(x), sep = "")
# A = 1 means patient underwent RHC
a <- ifelse(dat$swang1 == "No RHC", 0, 1)
# Y = 1 means survival at day 30
y <- ifelse(dat$dth30 == "No", 1, 0)
# Select values for prop of unmeasured confounding at which evaluate bounds
eps_seq <- seq(0, 0.2, 0.01)
# Select model, "x" = S \ind (Y, A) | X, "xa" = S \ind Y | (X, A)
model <- c("x", "xa")
# Select SuperLearner Library
sl.lib <- c("SL.mean", "SL.speedlm", "SL.speedglm", "SL.gam",
"SL.ranger", "SL.polymars", "SL.svm")
# Estimate Regression functions once for both model "x" and model "xa"
# There is a "non-list contrasts argument ignored" warning from SL gam library
# coming from model.matrix, which I think can be ignored.
nuis_fns <- do_crossfit(y = y, a = a, x = x, nsplits = 5, outfam = binomial(),
treatfam = binomial(), sl.lib = sl.lib)
View(x)
